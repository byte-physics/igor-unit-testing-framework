
// Author: Thomas Braun (c) 2013
// Email: thomas dot braun at byte-physics dott de

/// @defgroup TestRunnerAndHelper Helper functions 
/// Runner and helper functions

/// @defgroup Assertions Test Assertions
/// Test assertions for variables, strings, waves and helper functions

/// @defgroup assertionFlags Assertions flags
/// Constants for assertion test tuning

/// @defgroup testWaveFlags Wave existence flags
/// Values for @c majorType / @c minorType of @ref WARN_WAVE, @ref CHECK_WAVE and @ref REQUIRE_WAVE

/// @defgroup equalWaveFlags Wave equality flags
/// Values for @c mode in @ref WARN_EQUAL_WAVES, @ref CHECK_EQUAL_WAVES and @ref REQUIRE_EQUAL_WAVES

/// @defgroup HookFunctions Default hook functions
/// Default implementation of test hook functions

/// @example example1-plain.ipf
/// Test suite showing the basic working principles.

///  @example example2-plain.ipf
/// Test suite with run routine and module/static usage.
/// See the section about [test cases](@ref secTestCase) why the function run_IGNORE() is not considered a test case.
 
/// @example example3-plain.ipf
/// Test suite emphasising the difference between the WARN, CHECK and REQUIRE assertion variants.
/// See also @ref secAssertionTypes.
 
/// @example example4-wavechecking.ipf
/// Test suite showing some test assertions for waves.
 
/// @example example5-overridehooks.ipf
/// Two test suites showing how to use test hook overrides.
/// \include example5-overridehooks-otherSuite.ipf
 
/// @example Example6/example6-automatic-invocation.ipf
/// Test suite showing how to automate testing from the command line.
/// See also @ref secAutomaticExecution.
/// \include Example6/example6-runner.ipf

/**

@mainpage

This package empowers a programmer to utilize unit testing for Igor Pro procedures and XOPs.
For a quick start have a look at the [first example](@ref example1-plain.ipf).

The basic building blocks of this package are [Assertions](@ref secAssertionTypes) (for checking if an entity fullfills specific properties), [Test Cases](@ref secTestCase) (group of assertions) and [Test Suites](@ref secTestSuite) (group of test cases).

Interface design and naming is inspired by the [Boost Test Library](http://www.boost.org/libs/test).
 
@section secAssertionTypes Assertion Types

An assertion checks that a given condition is true. Or in more general terms that an entity fullfills specific properties. Test assertions are defined for strings, variables and waves and have ALL CAPS names. They always come in tripletts which differ only in how they react on a failed assertion. Comparing two variables for example can be done with @ref WARN_EQUAL_VAR, @ref CHECK_EQUAL_VAR or @ref REQUIRE_EQUAL_VAR.
@par
The following table summarizes the action on a failed assertion:
<table border>
<tr>
  <td>Type</td>
  <td>Create Log Message</td>
  <td>Increment Error Count</td>
  <td>Abort execution immediately</td>
</tr>
<tr>
  <td>WARN</td>
  <td>YES</td>
  <td>NO</td>
  <td>NO</td>
</tr>
<tr>
  <td>CHECK</td>
  <td>YES</td>
  <td>YES</td>
  <td>NO</td>
</tr>
<tr>
  <td>REQUIRE</td>
  <td>YES</td>
  <td>YES</td>
  <td>YES</td>
</tr>
</table>

If in doubt use the CHECK variant. For the sake of clarity only the CHECK variants are documented, as the interface for REQUIRE and WARN is equivalent.

@section secTestCase Test Case

A test case is one of the basic building blocks grouping assertions together. A function is considered a test case if it fullfills all of the following properties:
- takes no parameters
- its name does not end on _IGNORE
- is either non-static or static and part of a regular module

The second rule allows advanced users to add their own helper functions. It is advised to define all test cases as static functions and to create one regular module per procedure file.

A single test case from a test suite can be run using the optional @c testCase parameter of @ref RunTest.

@section secTestSuite Test Suite

A test suite is a group of test cases which should belong together and is equal to a procedure file. Therefore tests suites can not be nested, although multiple test suites can be run with once command using the parameter @c procWinList of @ref RunTest.

@section secTestHooks Test Hooks

To ensure proper test case execution and enable book keeping, specific hook functions are called before/after distinct events. These hook functions always come in pairs with their names ending on _BEGIN and _END. Before the first test case of the first test suite is executed, the hook @ref TEST_BEGIN is called, therefore @ref TEST_END marks the last function being called immediately before @ref RunTest returns. Similarly the hooks @ref TEST_SUITE_BEGIN and @ref TEST_SUITE_END are called before and after every test suite, @ref TEST_CASE_BEGIN and @ref TEST_CASE_END before and after every test case.

In case the default hook functions don't suite your needs, it is explicitly @b not advised to just adapt them. Instead use [test hook overrides](@ref secTestHooksOverride) and override them on a global or per test suite level.

@subsection secTestHooksOverride Override Test Hooks

The default test hooks can be overridden by defining your own version of the hooks suffixed with _OVERRIDE. The override hooks for @ref TEST_BEGIN and @ref TEST_END can only be overriden by functions in ProcGlobal. The override hooks for test suites/cases can be overriden globally if they reside in ProcGlobal context, or for a specific test suite only if they are defined in the same regular module as that test suite. Overriding here means that the default test hook is @b not executed. In case you still want to have the default test hook executed, you have to call it yourself in the override function as done in [example 5](@ref example5-overridehooks.ipf).

The override test hooks have to accept exactly one string parameter, which is the name of the test suite group, test suite name or test case name.

@section secAutomaticExecution Automate Test Runs

To further simplify test execution it is possible to automate test runs from the command line.<br>
Steps to do that include:
- Implement a function called @c run in ProcGlobal context taking no parameters. This function must perform all necessary steps for test execution, which is at least one call to @ref RunTest.
- Put the test experiment together with your test suites (procedure files) and the script helper/autorun-test.bat into its own folder
- Run the batch file autorun-test.bat
- Inspect the created log file
 
See also @ref Example6/example6-automatic-invocation.ipf
**/

